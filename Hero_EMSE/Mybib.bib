@Book{stephen,
  author = {Stephen H. Kan},
  title = {Metrics and Models in Software Quality Engineering}
},

@ARTICLE{basil, 
author={V. R. Basili and L. C. Briand and W. L. Melo}, 
journal={IEEE Transactions on Software Engineering}, 
title={A validation of object-oriented design metrics as quality indicators}, 
year={1996}, 
volume={22}, 
number={10}, 
pages={751-761}, 
keywords={object-oriented methods;software metrics;software quality;software maintenance;information systems;object-oriented languages;C language;object-oriented design metrics;software quality indicators;fault-prone classes;class maintenance changes;metric validation;information management systems;sequential life cycle model;object oriented analysis;C++ programming language;data set;software development;Programming;Object oriented modeling;Software systems;Software maintenance;Design methodology;Computer languages;Predictive models;Resource management;System testing;Costs}, 
doi={10.1109/32.544352}, 
ISSN={0098-5589}, 
month={Oct},},

@ARTICLE{Subramanyam, 
author={R. Subramanyam and M. S. Krishnan}, 
journal={IEEE Transactions on Software Engineering}, 
title={Empirical analysis of CK metrics for object-oriented design complexity: implications for software defects}, 
year={2003}, 
volume={29}, 
number={4}, 
pages={297-310}, 
keywords={object-oriented programming;software metrics;program debugging;CK metric analysis;object-oriented design complexity;software defects;software development;software quality;OO design complexity metrics;software defect determination;C++;Java;Software design;Software quality;Application software;Programming;Productivity;Computer industry;Industrial control;Computer languages;Size control;Java}, 
doi={10.1109/TSE.2003.1191795}, 
ISSN={0098-5589}, 
month={April},},

@inproceedings{Zimmermann:2007:PDE:1268984.1269057,
 author = {Zimmermann, Thomas and Premraj, Rahul and Zeller, Andreas},
 title = {Predicting Defects for Eclipse},
 booktitle = {Proceedings of the Third International Workshop on Predictor Models in Software Engineering},
 series = {PROMISE '07},
 year = {2007},
 isbn = {0-7695-2954-2},
 pages = {9--},
 url = {http://dx.doi.org/10.1109/PROMISE.2007.10},
 doi = {10.1109/PROMISE.2007.10},
 acmid = {1269057},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
},

@ARTICLE{timm, 
author={T. Menzies and J. Greenwald and A. Frank}, 
journal={IEEE Transactions on Software Engineering}, 
title={Data Mining Static Code Attributes to Learn Defect Predictors}, 
year={2007}, 
volume={33}, 
number={1}, 
pages={2-13}, 
keywords={data mining;learning (artificial intelligence);program diagnostics;program testing;software quality;data mining;static code attributes;defect predictor learning;McCabes versus Halstead;lines of code counts;resource-bound exploration;Data mining;Bayesian methods;Artificial intelligence;Software testing;System testing;Learning systems;Art;Software quality;Software systems;Financial management;Data mining detect prediction;McCabe;Halstead;artifical intelligence;empirical;naive Bayes.}, 
doi={10.1109/TSE.2007.256941}, 
ISSN={0098-5589}, 
month={Jan},},


@ARTICLE{graves, 
author={T. L. Graves and A. F. Karr and J. S. Marron and H. Siy}, 
journal={IEEE Transactions on Software Engineering}, 
title={Predicting fault incidence using software change history}, 
year={2000}, 
volume={26}, 
number={7}, 
pages={653-661}, 
keywords={software maintenance;software metrics;software fault tolerance;management of change;fault incidence;software change history;change management data;change history;fault potential;code decay;metrics;statistical analysis;History;Predictive models;Software systems;Aging;Time measurement;Software measurement;Length measurement;Software development management;Statistical analysis;Degradation}, 
doi={10.1109/32.859533}, 
ISSN={0098-5589}, 
month={July},},

@ARTICLE{Ostrand, 
author={T. J. Ostrand and E. J. Weyuker and R. M. Bell}, 
journal={IEEE Transactions on Software Engineering}, 
title={Predicting the location and number of faults in large software systems}, 
year={2005}, 
volume={31}, 
number={4}, 
pages={340-355}, 
keywords={program testing;software fault tolerance;binomial distribution;regression analysis;large software systems;binomial regression model;software fault prediction;software testing;Software systems;Predictive models;Fault diagnosis;System testing;History;Fault detection;Software testing;Personnel;Resource management;Sorting;Index Terms- Software faults;fault-prone;prediction;regression model;empirical study;software testing.}, 
doi={10.1109/TSE.2005.49}, 
ISSN={0098-5589}, 
month={April},},

@inproceedings{Knab,
 author = {Knab, Patrick and Pinzger, Martin and Bernstein, Abraham},
 title = {Predicting Defect Densities in Source Code Files with Decision Tree Learners},
 booktitle = {Proceedings of the 2006 International Workshop on Mining Software Repositories},
 series = {MSR '06},
 year = {2006},
 isbn = {1-59593-397-2},
 location = {Shanghai, China},
 pages = {119--125},
 numpages = {7},
 url = {http://doi.acm.org/10.1145/1137983.1138012},
 doi = {10.1145/1137983.1138012},
 acmid = {1138012},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {data mining, decision tree learner, defect prediction},
},

@inproceedings{SerdarBi√ßer,
 author = {Bi\c{c}er, Serdar and Bener, Ay\c{s}e Ba\c{s}ar and \c{C}a\u{g}layan, Bora},
 title = {Defect Prediction Using Social Network Analysis on Issue Repositories},
 booktitle = {Proceedings of the 2011 International Conference on Software and Systems Process},
 series = {ICSSP '11},
 year = {2011},
 isbn = {978-1-4503-0730-7},
 location = {Waikiki, Honolulu, HI, USA},
 pages = {63--71},
 numpages = {9},
 url = {http://doi.acm.org/10.1145/1987875.1987888},
 doi = {10.1145/1987875.1987888},
 acmid = {1987888},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {defect prediction, developer communication, network metrics, social networks},
},

@inproceedings{fengzhang,
 author = {Zhang, Feng and Mockus, Audris and Keivanloo, Iman and Zou, Ying},
 title = {Towards Building a Universal Defect Prediction Model},
 booktitle = {Proceedings of the 11th Working Conference on Mining Software Repositories},
 series = {MSR 2014},
 year = {2014},
 isbn = {978-1-4503-2863-0},
 location = {Hyderabad, India},
 pages = {182--191},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/2597073.2597078},
 doi = {10.1145/2597073.2597078},
 acmid = {2597078},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Universal defect prediction model, bug, context factors, defect, defect prediction, large scale, quality, rank transformation},
},

@misc{antoniolima,
    title={Coding Together at Scale: GitHub as a Collaborative Social Network},
    author={Antonio Lima and Luca Rossi and Mirco Musolesi},
    year={2014},
    eprint={1407.2535},
    archivePrefix={arXiv},
    primaryClass={cs.SI}
},

@article{gregmadey,
author = {Madey, Greg and Freeh, Vincent and Tynan, Renee},
year = {1806},
month = {01},
pages = {},
title = {The Open source software development phenomenon: An analysis based on social network theory},
journal = {Americas Conference on Information Systems}
},

@INPROCEEDINGS{devandu, 
author={C. Bird and N. Nagappan and H. Gall and B. Murphy and P. Devanbu}, 
booktitle={2009 20th International Symposium on Software Reliability Engineering}, 
title={Putting It All Together: Using Socio-technical Networks to Predict Failures}, 
year={2009}, 
volume={}, 
number={}, 
pages={109-119}, 
keywords={human factors;social sciences;software development management;software fault tolerance;software quality;socio-technical network;social factor;development organization;software quality;task assignment;dependency structure;individual software components fault proneness;software component network property;Eclipse development environment;failure prone components prediction;Predictive models;History;Software quality;Costs;Software systems;Software reliability;Reliability engineering;Social factors;Software performance;NIST;social networks;empirical studies;bug prediction}, 
doi={10.1109/ISSRE.2009.17}, 
ISSN={1071-9458}, 
month={Nov},},


@inproceedings{laurie1,
 author = {Meneely, Andrew and Williams, Laurie and Snipes, Will and Osborne, Jason},
 title = {Predicting Failures with Developer Networks and Social Network Analysis},
 booktitle = {Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
 series = {SIGSOFT '08/FSE-16},
 year = {2008},
 isbn = {978-1-59593-995-1},
 location = {Atlanta, Georgia},
 pages = {13--23},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/1453101.1453106},
 doi = {10.1145/1453101.1453106},
 acmid = {1453106},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {developer network, failure prediction, logistic regression, negative binomial regression, social network analysis},
},

@inproceedings{TimoWolf,
 author = {Wolf, Timo and Schroter, Adrian and Damian, Daniela and Nguyen, Thanh},
 title = {Predicting Build Failures Using Social Network Analysis on Developer Communication},
 booktitle = {Proceedings of the 31st International Conference on Software Engineering},
 series = {ICSE '09},
 year = {2009},
 isbn = {978-1-4244-3453-4},
 pages = {1--11},
 numpages = {11},
 url = {http://dx.doi.org/10.1109/ICSE.2009.5070503},
 doi = {10.1109/ICSE.2009.5070503},
 acmid = {1555017},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
},

@inproceedings{Pamela,
 author = {Bhattacharya, Pamela and Iliofotou, Marios and Neamtiu, Iulian and Faloutsos, Michalis},
 title = {Graph-based Analysis and Prediction for Software Evolution},
 booktitle = {Proceedings of the 34th International Conference on Software Engineering},
 series = {ICSE '12},
 year = {2012},
 isbn = {978-1-4673-1067-3},
 location = {Zurich, Switzerland},
 pages = {419--429},
 numpages = {11},
 url = {http://dl.acm.org/citation.cfm?id=2337223.2337273},
 acmid = {2337273},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA},
},

@Article{bell1,
author="Weyuker, Elaine J.
and Ostrand, Thomas J.
and Bell, Robert M.",
title="Do too many cooks spoil the broth? Using the number of developers to enhance defect prediction models",
journal="Empirical Software Engineering",
year="2008",
month="Oct",
day="01",
volume="13",
number="5",
pages="539--559",
abstract="Fault prediction by negative binomial regression models is shown to be effective for four large production software systems from industry. A model developed originally with data from systems with regularly scheduled releases was successfully adapted to a system without releases to identify 20{\%} of that system's files that contained 75{\%} of the faults. A model with a pre-specified set of variables derived from earlier research was applied to three additional systems, and proved capable of identifying averages of 81, 94 and 76{\%} of the faults in those systems. A primary focus of this paper is to investigate the impact on predictive accuracy of using data about the number of developers who access individual code units. For each system, including the cumulative number of developers who had previously modified a file yielded no more than a modest improvement in predictive accuracy. We conclude that while many factors can ``spoil the broth'' (lead to the release of software with too many defects), the number of developers is not a major influence.",
issn="1573-7616",
doi="10.1007/s10664-008-9082-8",
url="https://doi.org/10.1007/s10664-008-9082-8"
},

@Article{bell2,
author="Bell, Robert M.
and Ostrand, Thomas J.
and Weyuker, Elaine J.",
title="The limited impact of individual developer data on software defect prediction",
journal="Empirical Software Engineering",
year="2013",
month="Jun",
day="01",
volume="18",
number="3",
pages="478--505",
abstract="Previous research has provided evidence that a combination of static code metrics and software history metrics can be used to predict with surprising success which files in the next release of a large system will have the largest numbers of defects. In contrast, very little research exists to indicate whether information about individual developers can profitably be used to improve predictions. We investigate whether files in a large system that are modified by an individual developer consistently contain either more or fewer faults than the average of all files in the system. The goal of the investigation is to determine whether information about which particular developer modified a file is able to improve defect predictions. We also extend earlier research evaluating use of counts of the number of developers who modified a file as predictors of the file's future faultiness. We analyze change reports filed for three large systems, each containing 18 releases, with a combined total of nearly 4 million LOC and over 11,000 files. A buggy file ratio is defined for programmers, measuring the proportion of faulty files in Release R out of all files modified by the programmer in Release R-1. We assess the consistency of the buggy file ratio across releases for individual programmers both visually and within the context of a fault prediction model. Buggy file ratios for individual programmers often varied widely across all the releases that they participated in. A prediction model that takes account of the history of faulty files that were changed by individual developers shows improvement over the standard negative binomial model of less than 0.13{\%} according to one measure, and no improvement at all according to another measure. In contrast, augmenting a standard model with counts of cumulative developers changing files in prior releases produced up to a 2{\%} improvement in the percentage of faults detected in the top 20{\%} of predicted faulty files. The cumulative number of developers interacting with a file can be a useful variable for defect prediction. However, the study indicates that adding information to a model about which particular developer modified a file is not likely to improve defect predictions.",
issn="1573-7616",
doi="10.1007/s10664-011-9178-4",
url="https://doi.org/10.1007/s10664-011-9178-4"
},

@inproceedings{bell3,
 author = {Ostrand, Thomas J. and Weyuker, Elaine J. and Bell, Robert M.},
 title = {Programmer-based Fault Prediction},
 booktitle = {Proceedings of the 6th International Conference on Predictive Models in Software Engineering},
 series = {PROMISE '10},
 year = {2010},
 isbn = {978-1-4503-0404-7},
 location = {Timi\≈üoara, Romania},
 pages = {19:1--19:10},
 articleno = {19},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1868328.1868357},
 doi = {10.1145/1868328.1868357},
 acmid = {1868357},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {bug ratio, empirical study, fault-prone, prediction, regression model, software faults},
},

@inproceedings{perils,
 author = {Kalliamvakou, Eirini and Gousios, Georgios and Blincoe, Kelly and Singer, Leif and German, Daniel M. and Damian, Daniela},
 title = {The Promises and Perils of Mining GitHub},
 booktitle = {Proceedings of the 11th Working Conference on Mining Software Repositories},
 series = {MSR 2014},
 year = {2014},
 isbn = {978-1-4503-2863-0},
 location = {Hyderabad, India},
 pages = {92--101},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/2597073.2597074},
 doi = {10.1145/2597073.2597074},
 acmid = {2597074},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Mining software repositories, bias, code reviews, git, github},
},

@Article{curating,
author="Munaiah, Nuthan
and Kroh, Steven
and Cabrey, Craig
and Nagappan, Meiyappan",
title="Curating GitHub for engineered software projects",
journal="Empirical Software Engineering",
year="2017",
month="Dec",
day="01",
volume="22",
number="6",
pages="3219--3253",
abstract="Software forges like GitHub host millions of repositories. Software engineering researchers have been able to take advantage of such a large corpora of potential study subjects with the help of tools like GHTorrent and Boa. However, the simplicity in querying comes with a caveat: there are limited means of separating the signal (e.g. repositories containing engineered software projects) from the noise (e.g. repositories containing home work assignments). The proportion of noise in a random sample of repositories could skew the study and may lead to researchers reaching unrealistic, potentially inaccurate, conclusions. We argue that it is imperative to have the ability to sieve out the noise in such large repository forges. We propose a framework, and present a reference implementation of the framework as a tool called reaper, to enable researchers to select GitHub repositories that contain evidence of an engineered software project. We identify software engineering practices (called dimensions) and propose means for validating their existence in a GitHub repository. We used reaper to measure the dimensions of 1,857,423 GitHub repositories. We then used manually classified data sets of repositories to train classifiers capable of predicting if a given GitHub repository contains an engineered software project. The performance of the classifiers was evaluated using a set of 200 repositories with known ground truth classification. We also compared the performance of the classifiers to other approaches to classification (e.g. number of GitHub Stargazers) and found our classifiers to outperform existing approaches. We found stargazers-based classifier (with 10 as the threshold for number of stargazers) to exhibit high precision (97{\%}) but an inversely proportional recall (32{\%}). On the other hand, our best classifier exhibited a high precision (82{\%}) and a high recall (86{\%}). The stargazer-based criteria offers precision but fails to recall a significant portion of the population.",
issn="1573-7616",
doi="10.1007/s10664-017-9512-6",
url="https://doi.org/10.1007/s10664-017-9512-6"
},

@article{Agrawal_2018,
   title={We don‚Äôt need another hero?},
   ISBN={9781450356596},
   url={http://dx.doi.org/10.1145/3183519.3183549},
   DOI={10.1145/3183519.3183549},
   journal={Proceedings of the 40th International Conference on Software Engineering Software Engineering in Practice - ICSE-SEIP  ‚Äô18},
   publisher={ACM Press},
   author={Agrawal, Amritanshu and Rahman, Akond and Krishna, Rahul and Sobran, Alexander and Menzies, Tim},
   year={2018}
},


@INPROCEEDINGS{borges, 
author={H. Borges and A. Hora and M. T. Valente}, 
booktitle={2016 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
title={Understanding the Factors That Impact the Popularity of GitHub Repositories}, 
year={2016}, 
volume={}, 
number={}, 
pages={334-344}, 
keywords={public domain software;software reviews;source code (software);time series;GitHub Repositories;open source developers;software acceptance;software system popularity;open source software;stargazers button;GitHub projects;programming language;project popularity;time series;software market;Software;Libraries;Organizations;Documentation;HTML;Java;GitHub;Software Popularity;Open Source software;Social coding}, 
doi={10.1109/ICSME.2016.31}, 
ISSN={}, 
month={Oct},}

@article{NIST,
author = {Tassey and Gregory},
year = {2002},
month = {05},
pages = {},
title = {The Economic Impacts of Inadequate Infrastructure for Software Testing}
}

@incollection{Boehm,
 author = {Boehm, Barry W.},
 chapter = {Software Engineering Economics},
 title = {Software Pioneers},
 editor = {Broy, Manfred and Denert, Ernst},
 year = {2002},
 isbn = {3-540-43081-4},
 pages = {641--686},
 numpages = {46},
 url = {http://dl.acm.org/citation.cfm?id=944331.944370},
 acmid = {944370},
 publisher = {Springer-Verlag},
 address = {Berlin, Heidelberg},
 keywords = {computer programming costs, cost models, management decision aids, software cost estimation, software economics, software engineering, software management},
}

@inproceedings{Arisholm:2006:PFC:1159733.1159738,
 author = {Arisholm, Erik and Briand, Lionel C.},
 title = {Predicting Fault-prone Components in a Java Legacy System},
 booktitle = {Proceedings of the 2006 ACM/IEEE International Symposium on Empirical Software Engineering},
 series = {ISESE '06},
 year = {2006},
 isbn = {1-59593-218-6},
 location = {Rio de Janeiro, Brazil},
 pages = {8--17},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1159733.1159738},
 doi = {10.1145/1159733.1159738},
 acmid = {1159738},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@inproceedings{Bernstein2007ImprovingDP,
  title={Improving defect prediction using temporal features and non linear models},
  author={Abraham Bernstein and Jayalath Ekanayake and Martin Pinzger},
  booktitle={IWPSE},
  year={2007}
}

@inproceedings{Denaro:2002:EEF:581339.581371,
 author = {Denaro, Giovanni and Pezz\`{e}, Mauro},
 title = {An Empirical Evaluation of Fault-proneness Models},
 booktitle = {Proceedings of the 24th International Conference on Software Engineering},
 series = {ICSE '02},
 year = {2002},
 isbn = {1-58113-472-X},
 location = {Orlando, Florida},
 pages = {241--251},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/581339.581371},
 doi = {10.1145/581339.581371},
 acmid = {581371},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {cross-validation, fault-proneness models, logistic regression, principal component analysis, software faultiness, software metrics, software process, testing process},
} 

@inproceedings{Nagappan:2005:URC:1062455.1062514,
 author = {Nagappan, Nachiappan and Ball, Thomas},
 title = {Use of Relative Code Churn Measures to Predict System Defect Density},
 booktitle = {Proceedings of the 27th International Conference on Software Engineering},
 series = {ICSE '05},
 year = {2005},
 isbn = {1-58113-963-2},
 location = {St. Louis, MO, USA},
 pages = {284--292},
 numpages = {9},
 url = {http://doi.acm.org/10.1145/1062455.1062514},
 doi = {10.1145/1062455.1062514},
 acmid = {1062514},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {defect density, fault-proneness, multiple regression, principal component analysis, relative code churn},
} 

@inproceedings{Ostrand:2005:LF:1095242.1095262,
 author = {Ostrand, Thomas J. and Weyuker, Elaine J. and Bell, Robert M.},
 title = {Locating Where Faults Will Be},
 booktitle = {Proceedings of the 2005 Conference on Diversity in Computing},
 series = {TAPIA '05},
 year = {2005},
 isbn = {1-59593-257-7},
 location = {Albuquerque, New Mexico, USA},
 pages = {48--50},
 numpages = {3},
 url = {http://doi.acm.org/10.1145/1095242.1095262},
 doi = {10.1145/1095242.1095262},
 acmid = {1095262},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {empirical study, fault-prone, prediction, regression model, software faults, software testing},
} 

@ARTICLE{Acuna, 
author={S. T. Acuna and N. Juristo and A. M. Moreno}, 
journal={IEEE Software}, 
title={Emphasizing human capabilities in software development}, 
year={2006}, 
volume={23}, 
number={2}, 
pages={94-101}, 
keywords={human resource management;software development management;small-to-medium enterprises;software houses;software development;human resources management;software organization;human capability-based procedure;personnel development;occupational psychologist;small and medium-sized enterprise;Humans;Programming;Psychology;Software development management;Standards development;Software testing;Refining;Software standards;Risk management;Resource management;human capabilities;software roles;person-role fit}, 
doi={10.1109/MS.2006.47}, 
ISSN={0740-7459}, 
month={March},}

@book{Constantine,
 author = {Constantine, Larry},
 title = {The  Peopleware Papers: Notes on the Human Side of Programming},
 year = {2001},
 isbn = {0130601233},
 edition = {2nd},
 publisher = {Prentice Hall Professional Technical Reference},
} 

@article{Solingen,
author = {Solingen, Rini and Berghout, Egon and Kusters, Rob and Trienekens, Jos},
year = {2000},
month = {11},
pages = {965-971},
title = {From process improvement to people improvement: Enabling learning in software development},
volume = {42},
journal = {Information and Software Technology},
doi = {10.1016/S0950-5849(00)00148-8}
}

@inproceedings{Whitehead:2007:CSE:1253532.1254720,
 author = {Whitehead, Jim},
 title = {Collaboration in Software Engineering: A Roadmap},
 booktitle = {2007 Future of Software Engineering},
 series = {FOSE '07},
 year = {2007},
 isbn = {0-7695-2829-5},
 pages = {214--225},
 numpages = {12},
 url = {https://doi.org/10.1109/FOSE.2007.4},
 doi = {10.1109/FOSE.2007.4},
 acmid = {1254720},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
}

@article{Shukla,
author = {V. Shukla, Shilpa and Redmiles, David},
year = {1996},
month = {12},
pages = {},
title = {Collaborative Learning in a Software Bug-Tracking Scenario}
}
@inproceedings{Grinter:1999:SAP:295665.295668,
 author = {Grinter, Rebecca E.},
 title = {Systems Architecture: Product Designing and Social Engineering},
 booktitle = {Proceedings of the International Joint Conference on Work Activities Coordination and Collaboration},
 series = {WACC '99},
 year = {1999},
 isbn = {1-58113-070-8},
 location = {San Francisco, California, USA},
 pages = {11--18},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/295665.295668},
 doi = {10.1145/295665.295668},
 acmid = {295668},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {coordination and collaboration, empirical studies of design and development, grounded theory, systems architecture},
} 

@ARTICLE{Ohlsson, 
author={N. Ohlsson and H. Alberg}, 
journal={IEEE Transactions on Software Engineering}, 
title={Predicting fault-prone software modules in telephone switches}, 
year={1996}, 
volume={22}, 
number={12}, 
pages={886-894}, 
keywords={telephony;telecommunication computing;software fault tolerance;software metrics;statistical analysis;program testing;diagrams;electronic switching systems;fault-prone software module prediction;telephone switches;Ericsson Telecom AB;design metrics;function test failure reports;ERIMET tool;design documents;prediction model;design measures;performance;Alberg diagram;historical data;linear regression;software reliability;Telephony;Predictive models;Fault diagnosis;Switches;Telecommunication switching;Software testing;Data analysis;Size measurement;Linear regression;Phase measurement}, 
doi={10.1109/32.553637}, 
ISSN={0098-5589}, 
month={Dec},}

@inproceedings{Moser:2008:CAE:1368088.1368114,
 author = {Moser, Raimund and Pedrycz, Witold and Succi, Giancarlo},
 title = {A Comparative Analysis of the Efficiency of Change Metrics and Static Code Attributes for Defect Prediction},
 booktitle = {Proceedings of the 30th International Conference on Software Engineering},
 series = {ICSE '08},
 year = {2008},
 isbn = {978-1-60558-079-1},
 location = {Leipzig, Germany},
 pages = {181--190},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1368088.1368114},
 doi = {10.1145/1368088.1368114},
 acmid = {1368114},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {cost-sensitive classification, defect prediction, software metrics},
}

@INPROCEEDINGS{4814164, 
author={T. Zimmermann and N. Nagappan}, 
booktitle={2008 ACM/IEEE 30th International Conference on Software Engineering}, 
title={Predicting defects using network analysis on dependency graphs}, 
year={2008}, 
volume={}, 
number={}, 
pages={531-540}, 
keywords={software metrics;software quality;defects prediction;network analysis;dependency graphs;software development;quality assurance;resources allocation;code complexity metrics;central program units;Windows developers;Quality management;Resource management;Network servers;Quality assurance;Costs;Predictive models;Software engineering;Software measurement;Engineering management;Permission;defect prediction;dependency graph;network analysis;windows server 2003}, 
doi={10.1145/1368088.1368161}, 
ISSN={0270-5257}, 
month={May},}

@inproceedings{Goeminne,
author = {Goeminne, Mathieu and Mens, Tom},
year = {2011},
month = {01},
pages = {74-82},
title = {Evidence for the Pareto principle in Open Source Software Activity},
volume = {708},
journal = {CEUR Workshop Proceedings}
}

@inproceedings{yamashita2015revisiting,
  title={Revisiting the applicability of the pareto principle to core development teams in open source software projects},
  author={Yamashita, Kazuhiro and McIntosh, Shane and Kamei, Yasutaka and Hassan, Ahmed E and Ubayashi, Naoyasu},
  booktitle={Proceedings of the 14th International Workshop on Principles of Software Evolution},
  pages={46--55},
  year={2015},
  organization={ACM}
}

@inproceedings{robles2009evolution,
  title={Evolution of the core team of developers in libre software projects},
  author={Robles, Gregorio and Gonzalez-Barahona, Jesus M and Herraiz, Israel},
  booktitle={Mining Software Repositories, 2009. MSR'09. 6th IEEE International Working Conference on},
  pages={167--170},
  year={2009},
  organization={IEEE}
}
@inproceedings{torres2011analysis,
  title={Analysis of the core team role in open source communities},
  author={Torres, MR Martinez and Toral, SL and Perales, M and Barrero, F},
  booktitle={Complex, Intelligent and Software Intensive Systems (CISIS), 2011 International Conference on},
  pages={109--114},
  year={2011},
  organization={IEEE}
}
@inproceedings{goeminne2011evidence,
  title={Evidence for the pareto principle in open source software activity},
  author={Goeminne, Mathieu and Mens, Tom},
  booktitle={the Joint Porceedings of the 1st International workshop on Model Driven Software Maintenance and 5th International Workshop on Software Quality and Maintainability},
  pages={74--82},
  year={2011}
}
@article{wood2005multiview,
  title={Multiview as social informatics in action: past, present and future},
  author={Wood-Harper, Trevor and Wood, Bob},
  journal={Information Technology \& People},
  volume={18},
  number={1},
  pages={26--32},
  year={2005},
  publisher={Emerald Group Publishing Limited}
}
@inproceedings{boehm2006view,
  title={A view of 20th and 21st century software engineering},
  author={Boehm, Barry},
  booktitle={Proceedings of the 28th international conference on Software engineering},
  pages={12--29},
  year={2006},
  organization={ACM}
}
@article{hislop2002integrating,
  title={Integrating agile practices into software engineering courses},
  author={Hislop, Gregory W and Lutz, Michael J and Naveda, J Fernando and McCracken, W Michael and Mead, Nancy R and Williams, Laurie A},
  journal={Computer science education},
  volume={12},
  number={3},
  pages={169--185},
  year={2002},
  publisher={Taylor \& Francis}
}
@article{morcovcomplex,
  title={Complex IT Projects in Education: The Challenge},
  author={Morcov, Stefan},
  year={2012},
  journal={International Journal of Computer Science Research and Application},
  volume={2},
  pages={115--125},
}
@inproceedings{bier2011online,
  title={An online learning approach to information systems security education},
  author={Bier, Norman and Lovett, Marsha and Seacord, Robert},
  booktitle={Proceedings of the 15th Colloquium for Information Systems Security Education},
  year={2011}
}

@article{cosentino2017systematic,
  title={A Systematic Mapping Study of Software Development With GitHub},
  author={Cosentino, Valerio and Izquierdo, Javier L C{\'a}novas and Cabot, Jordi},
  journal={IEEE Access},
  volume={5},
  pages={7173--7192},
  year={2017},
  publisher={IEEE}
}

@inproceedings{dias2016does,
  title={How Does the Shift to GitHub Impact Project Collaboration?},
  author={Dias, Luiz Felipe and Steinmacher, Igor and Pinto, Gustavo and da Costa, Daniel Alencar and Gerosa, Marco},
  booktitle={Software Maintenance and Evolution (ICSME), 2016 IEEE International Conference on},
  pages={473--477},
  year={2016},
  organization={IEEE}
}

@article{Peterson,
author = {Peterson, Kevin},
year = {2013},
month = {12},
pages = {},
title = {The GitHub Open Source Development Process}
}

@article{KrishnamurthyS,
	author = {Sandeep Krishnamurthy},
	title = {Cave or community? An empirical examination of 100 mature open source projects (originally published in Volume 7, Number 6, June 2002)},
	journal = {First Monday},
	volume = {0},
	number = {0},
	year = {2005},
	keywords = {},
	issn = {13960466},	doi = {10.5210/fm.v0i0.1477},
	url = {https://firstmonday.org/ojs/index.php/fm/article/view/1477}
}

@inproceedings{gautam2017empirical,
  title={An empirical study of activity, popularity, size, testing, and stability in continuous integration},
  author={Gautam, Aakash and Vishwasrao, Saket and Servant, Francisco},
  booktitle={Proceedings of the 14th International Conference on Mining Software Repositories},
  pages={495--498},
  year={2017},
  organization={IEEE Press}
}

@article{Otero_2009,
author = {Otero, Luis and Centeno, Grisselle and Ruiz-Torres, Alex and E. Otero, Carlos},
year = {2009},
month = {05},
pages = {1333-1339},
title = {A systematic approach for resource allocation in software projects},
volume = {56},
journal = {Computers & Industrial Engineering},
doi = {10.1016/j.cie.2008.08.002}
}

@inproceedings{Yiftachel:2006,
 author = {Yiftachel, Peleg and Peled, Dan and Hadar, Irit and Goldwasser, Dan},
 title = {Resource Allocation Among Development Phases: An Economic Approach},
 booktitle = {Proceedings of the 2006 International Workshop on Economics Driven Software Engineering Research},
 series = {EDSER '06},
 year = {2006},
 isbn = {1-59593-396-4},
 location = {Shanghai, China},
 pages = {43--48},
 numpages = {6},
 url = {http://doi.acm.org/10.1145/1139113.1139124},
 doi = {10.1145/1139113.1139124},
 acmid = {1139124},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {software development phases, software production function, software quality, software resource allocation},
}

@ARTICLE{Agile_software_development, 
author={A. Cockburn and J. Highsmith}, 
journal={Computer}, 
title={Agile software development, the people factor}, 
year={2001}, 
volume={34}, 
number={11}, 
pages={131-133}, 
keywords={software development management;human factors;agile software development;people factor;talents;teams;user experts;individual competence;agile organizations;agile ecosystems;Programming;Project management;Humans;Feedback;Chaotic communication;Software development management;Technology management;World Wide Web;Problem-solving;Collaborative work}, 
doi={10.1109/2.963450}, 
ISSN={0018-9162}, 
month={Nov},}

@article{Kraut:1995:CSD:203330.203345,
 author = {Kraut, Robert E. and Streeter, Lynn A.},
 title = {Coordination in Software Development},
 journal = {Commun. ACM},
 issue_date = {March 1995},
 volume = {38},
 number = {3},
 month = mar,
 year = {1995},
 issn = {0001-0782},
 pages = {69--81},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/203330.203345},
 doi = {10.1145/203330.203345},
 acmid = {203345},
 publisher = {ACM},
 address = {New York, NY, USA},
} 


@ARTICLE{1205177, 
author={J. D. Herbsleb and A. Mockus}, 
journal={IEEE Transactions on Software Engineering}, 
title={An empirical study of speed and communication in globally distributed software development}, 
year={2003}, 
volume={29}, 
number={6}, 
pages={481-494}, 
keywords={software development management;management of change;social aspects of automation;globally distributed software development;technology companies;development cycle time;source code change management system;survey data;calendar time;distributed social networks;same-site social networks;collaboration technology;speed;communication;Programming;Collaborative work;Social network services;Frequency;Software development management;Delay effects;Calendars;Data analysis;Testing;Collaborative software}, 
doi={10.1109/TSE.2003.1205177}, 
ISSN={0098-5589}, 
month={June},}

@book{Adzic:2011:SES:2031459,
 author = {Adzic, Gojko},
 title = {Specification by Example: How Successful Teams Deliver the Right Software},
 year = {2011},
 isbn = {1617290084, 9781617290084},
 edition = {1st},
 publisher = {Manning Publications Co.},
 address = {Greenwich, CT, USA},
}

@inproceedings{Abreu:2009:DCF:1595808.1595835,
 author = {Abreu, Roberto and Premraj, Rahul},
 title = {How Developer Communication Frequency Relates to Bug Introducing Changes},
 booktitle = {Proceedings of the Joint International and Annual ERCIM Workshops on Principles of Software Evolution (IWPSE) and Software Evolution (Evol) Workshops},
 series = {IWPSE-Evol '09},
 year = {2009},
 isbn = {978-1-60558-678-6},
 location = {Amsterdam, The Netherlands},
 pages = {153--158},
 numpages = {6},
 url = {http://doi.acm.org/10.1145/1595808.1595835},
 doi = {10.1145/1595808.1595835},
 acmid = {1595835},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {developer communication, mailing lists, social network analysis, software quality},
} 

@article{TESCH2009657,
title = "User and developer common knowledge: Effect on the success of information system development projects",
journal = "International Journal of Project Management",
volume = "27",
number = "7",
pages = "657 - 664",
year = "2009",
issn = "0263-7863",
doi = "https://doi.org/10.1016/j.ijproman.2009.01.002",
url = "http://www.sciencedirect.com/science/article/pii/S0263786309000039",
author = "Debbie Tesch and Marion G. Sobol and Gary Klein and James J. Jiang",
keywords = "Project management, System development, Domain knowledge, Collaboration, Knowledge redundancy"
}

@inproceedings{Girba,
author = {Girba, T and Kuhn, A and Seeberger, M and Ducasse, St√©phane},
year = {2005},
month = {10},
pages = {113- 122},
title = {How developers drive software evolution},
volume = {2005},
isbn = {0-7695-2349-8},
journal = {International Workshop on Principles of Software Evolution (IWPSE)},
doi = {10.1109/IWPSE.2005.21}
}

@ARTICLE{841783, 
author={T. C. Lethbridge}, 
journal={Computer}, 
title={What knowledge is important to a software professional?}, 
year={2000}, 
volume={33}, 
number={5}, 
pages={44-50}, 
keywords={software engineering;training;professional aspects;personnel;software professional;licensing requirements;educational curricula;training programs;survey;job functions;careers;Educational institutions;Software engineering;Licenses;Engineering profession;Computer science education;Computer science;Educational programs;Design engineering;Knowledge engineering;Computer industry}, 
doi={10.1109/2.841783}, 
ISSN={0018-9162}, 
month={May},}

@article{RodrguezGarca2012EmpiricalFO,
  title={Empirical findings on team size and productivity in software development},
  author={Daniel Rodr{\'i}guez-Garc{\'i}a and Miguel-{\'A}ngel Sicilia and Elena Garc{\'i}a Barriocanal and Rachel Harrison},
  journal={Journal of Systems and Software},
  year={2012},
  volume={85},
  pages={562-570}
}

@misc{Erik,
title = {The Relationship Between Team Size and Code Quality},
author = {Erik Dietrich},
howpublished = "\url {https://blog.ndepend.com/relationship-team-size-code-quality/ }",
}


@misc{Bernstein,
title = {Does Team Size Impact Code Quality?},
author = {Michael Bernstein},
howpublished = "\url {https://codeclimate.com/blog/does-team-size-impact-code-quality/ }",
year = {cited May 2014} }


@misc{Erickson,
title = {Small Teams Are Dramatically More Efficient than Large Teams},
author = {Carl Erickson},
howpublished = "\url {https://spin.atomicobject.com/2012/01/11/small-teams-are-dramatically-more-efficient-than-large-teams/ }",
year = {cited Jan 2012} }

@article{brooks1974mythical,
  title={The mythical man-month},
  author={Brooks, Frederick P},
  journal={Datamation},
  volume={20},
  number={12},
  pages={44--52},
  year={1974}
}

@article{madey2002open,
  title={The open source software development phenomenon: An analysis based on social network theory},
  author={Madey, Gregory and Freeh, Vincent and Tynan, Renee},
  journal={AMCIS 2002 Proceedings},
  pages={247},
  year={2002}
}

@article{sowe2008understanding,
  title={Understanding knowledge sharing activities in free/open source software projects: An empirical study},
  author={Sowe, Sulayman K and Stamelos, Ioannis and Angelis, Lefteris},
  journal={Journal of Systems and Software},
  volume={81},
  number={3},
  pages={431--446},
  year={2008},
  publisher={Elsevier}
}

@article{fuller2014user,
  title={User roles and contributions in innovation-contest communities},
  author={F{\"u}ller, Johann and Hutter, Katja and Hautz, Julia and Matzler, Kurt},
  journal={Journal of Management Information Systems},
  volume={31},
  number={1},
  pages={273--308},
  year={2014},
  publisher={Taylor \& Francis}
}

@article{sowe2006identifying,
  title={Identifying knowledge brokers that yield software engineering knowledge in OSS projects},
  author={Sowe, Sulayman and Stamelos, Ioannis and Angelis, Lefteris},
  journal={Information and Software Technology},
  volume={48},
  number={11},
  pages={1025--1033},
  year={2006},
  publisher={Elsevier}
}

@book{brooks1995mythical,
  title={The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition, 2/E},
  author={Brooks Jr, Frederick P},
  year={1995},
  publisher={Pearson Education India}
}

@article{Brooks:1975,
 author = {Brooks,Jr., Fred P.},
 title = {The Mythical Man-Month},
 journal = {SIGPLAN Not.},
 issue_date = {June 1975},
 volume = {10},
 number = {6},
 month = apr,
 year = {1975},
 issn = {0362-1340},
 pages = {193--},
 url = {http://doi.acm.org/10.1145/390016.808439},
 doi = {10.1145/390016.808439},
 acmid = {808439},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Chief programmer, Documentation, Estimation, Scheduling, Software architecture, Software engineering, Support services, Testing},
} 
[download]


@article{koch2002effort,
  title={Effort, co-operation and co-ordination in an open source software project: GNOME},
  author={Koch, Stefan and Schneider, Georg},
  journal={Information Systems Journal},
  volume={12},
  number={1},
  pages={27--42},
  year={2002},
  publisher={Wiley Online Library}
}

@article{mockus2002two,
  title={Two case studies of open source software development: Apache and Mozilla},
  author={Mockus, Audris and Fielding, Roy T and Herbsleb, James D},
  journal={ACM Transactions on Software Engineering and Methodology (TOSEM)},
  volume={11},
  number={3},
  pages={309--346},
  year={2002},
  publisher={ACM}
}

@inproceedings{Herbsleb:2014,
 author = {Herbsleb, James},
 title = {Socio-technical Coordination (Keynote)},
 booktitle = {Companion Proceedings of the 36th International Conference on Software Engineering},
 series = {ICSE Companion 2014},
 year = {2014},
 isbn = {978-1-4503-2768-8},
 location = {Hyderabad, India},
 pages = {1--1},
 numpages = {1},
 url = {http://doi.acm.org/10.1145/2591062.2600729},
 doi = {10.1145/2591062.2600729},
 acmid = {2600729},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Architecture, Congruence, Coordination, Organization},
} 
[download]

@inproceedings{Pinzger2008CanDN,
  title={Can developer-module networks predict failures?},
  author={Martin Pinzger and Nachiappan Nagappan and Brendan Murphy},
  booktitle={SIGSOFT FSE},
  year={2008}
}

@inproceedings{Meneely2008PredictingFW,
  title={Predicting failures with developer networks and social network analysis},
  author={Andrew Meneely and Laurie A. Williams and Will Snipes and Jason A. Osborne},
  booktitle={SIGSOFT FSE},
  year={2008}
}

@Article{Weyuker2008,
author="Weyuker, Elaine J.
and Ostrand, Thomas J.
and Bell, Robert M.",
title="Do too many cooks spoil the broth? Using the number of developers to enhance defect prediction models",
journal="Empirical Software Engineering",
year="2008",
month="Oct",
day="01",
volume="13",
number="5",
pages="539--559",
abstract="Fault prediction by negative binomial regression models is shown to be effective for four large production software systems from industry. A model developed originally with data from systems with regularly scheduled releases was successfully adapted to a system without releases to identify 20{\%} of that system's files that contained 75{\%} of the faults. A model with a pre-specified set of variables derived from earlier research was applied to three additional systems, and proved capable of identifying averages of 81, 94 and 76{\%} of the faults in those systems. A primary focus of this paper is to investigate the impact on predictive accuracy of using data about the number of developers who access individual code units. For each system, including the cumulative number of developers who had previously modified a file yielded no more than a modest improvement in predictive accuracy. We conclude that while many factors can ``spoil the broth'' (lead to the release of software with too many defects), the number of developers is not a major influence.",
issn="1573-7616",
doi="10.1007/s10664-008-9082-8",
url="https://doi.org/10.1007/s10664-008-9082-8"
}

@article{KUPIAINEN2015143,
title = "Using metrics in Agile and Lean Software Development ‚Äì A systematic literature review of industrial studies",
journal = "Information and Software Technology",
volume = "62",
pages = "143 - 163",
year = "2015",
issn = "0950-5849",
doi = "https://doi.org/10.1016/j.infsof.2015.02.005",
url = "http://www.sciencedirect.com/science/article/pii/S095058491500035X",
author = "Eetu Kupiainen and Mika V. M√§ntyl√§ and Juha Itkonen",
keywords = "Agile, Lean, Metrics, Measurement, Systematic literature review, Software engineering",
abstract = "Context
Software industry has widely adopted Agile software development methods. Agile literature proposes a few key metrics but little is known of the actual metrics use in Agile teams.
Objective
The objective of this paper is to increase knowledge of the reasons for and effects of using metrics in industrial Agile development. We focus on the metrics that Agile teams use, rather than the ones used from outside by software engineering researchers. In addition, we analyse the influence of the used metrics.
Method
This paper presents a systematic literature review (SLR) on using metrics in industrial Agile software development. We identified 774 papers, which we reduced to 30 primary studies through our paper selection process.
Results
The results indicate that the reasons for and the effects of using metrics are focused on the following areas: sprint planning, progress tracking, software quality measurement, fixing software process problems, and motivating people. Additionally, we show that although Agile teams use many metrics suggested in the Agile literature, they also use many custom metrics. Finally, the most influential metrics in the primary studies are Velocity and Effort estimate.
Conclusion
The use of metrics in Agile software development is similar to Traditional software development. Projects and sprints need to be planned and tracked. Quality needs to be measured. Problems in the process need to be identified and fixed. Future work should focus on metrics that had high importance but low prevalence in our study, as they can offer the largest impact to the software industry."
}

@INPROCEEDINGS{1385642, 
author={ and and S. {Christley} and G. {Madey}}, 
booktitle={Proceedings of the 38th Annual Hawaii International Conference on System Sciences}, 
title={A Topological Analysis of the Open Souce Software Development Community}, 
year={2005}, 
volume={}, 
number={}, 
pages={198a-198a}, 
keywords={Programming;Social network services;Data mining;Performance analysis;Computer bugs;Project management;Open source software;Statistics;Technological innovation;Information analysis}, 
doi={10.1109/HICSS.2005.57}, 
ISSN={1530-1605}, 
month={Jan},}

@article{Majumder_2012,
   title={Capacitated team formation problem on social networks},
   ISBN={9781450314626},
   url={http://dx.doi.org/10.1145/2339530.2339690},
   DOI={10.1145/2339530.2339690},
   journal={Proceedings of the 18th ACM SIGKDD international conference on Knowledge discovery and data mining - KDD  ‚Äô12},
   publisher={ACM Press},
   author={Majumder, Anirban and Datta, Samik and Naidu, K.V.M.},
   year={2012}
}

@misc{lima2014coding,
    title={Coding Together at Scale: GitHub as a Collaborative Social Network},
    author={Antonio Lima and Luca Rossi and Mirco Musolesi},
    year={2014},
    eprint={1407.2535},
    archivePrefix={arXiv},
    primaryClass={cs.SI}
}

@ARTICLE{7539677, 
author={F. {Zhang} and A. E. {Hassan} and S. {McIntosh} and Y. {Zou}}, 
journal={IEEE Transactions on Software Engineering}, 
title={The Use of Summation to Aggregate Software Metrics Hinders the Performance of Defect Prediction Models}, 
year={2017}, 
volume={43}, 
number={5}, 
pages={476-491}, 
keywords={data aggregation;data mining;Java;public domain software;software metrics;software metrics aggregation;defect prediction models;software organizations;historical defect data mining;version control system;software changes recording;McCabe cyclomatic complexity;granularity disagreement;class-level software metrics;method-level software metrics;lines of code;Sloc;Cc;Java projects;open source projects;effort-aware defect prediction;summation;Predictive models;Correlation;Software metrics;Indexes;Software;Data models;Defect prediction;aggregation scheme;software metrics}, 
doi={10.1109/TSE.2016.2599161}, 
ISSN={0098-5589}, 
month={May},}

@ARTICLE{544352, 
author={V. R. {Basili} and L. C. {Briand} and W. L. {Melo}}, 
journal={IEEE Transactions on Software Engineering}, 
title={A validation of object-oriented design metrics as quality indicators}, 
year={1996}, 
volume={22}, 
number={10}, 
pages={751-761}, 
keywords={object-oriented methods;software metrics;software quality;software maintenance;information systems;object-oriented languages;C language;object-oriented design metrics;software quality indicators;fault-prone classes;class maintenance changes;metric validation;information management systems;sequential life cycle model;object oriented analysis;C++ programming language;data set;software development;Programming;Object oriented modeling;Software systems;Software maintenance;Design methodology;Computer languages;Predictive models;Resource management;System testing;Costs}, 
doi={10.1109/32.544352}, 
ISSN={0098-5589}, 
month={Oct},}

@article{LI1993111,
title = "Object-oriented metrics that predict maintainability",
journal = "Journal of Systems and Software",
volume = "23",
number = "2",
pages = "111 - 122",
year = "1993",
note = "Object-Oriented Software",
issn = "0164-1212",
doi = "https://doi.org/10.1016/0164-1212(93)90077-B",
url = "http://www.sciencedirect.com/science/article/pii/016412129390077B",
author = "Wei Li and Sallie Henry",
abstract = "Software metrics have been studied in the procedural paradigm as a quantitative means of assessing the software development process as well as the quality of software products. Several studies have validated that various metrics are useful indicators of maintenance effort in the procedural paradigm. However, software metrics have rarely been studied in the object-oriented paradigm. Very few metrics have been proposed to measure object-oriented systems, and the proposed ones have not been validated. This research concentrates on several object-oriented software metrics and the validation of these metrics with maintenance effort in two commercial systems. Statistical analyses of a prediction model incorporating 10 metrics were performed. In addition, a more compact model with fewer metrics is presented."
}

@article{BRIAND2000245,
title = "Exploring the relationships between design measures and software quality in object-oriented systems",
journal = "Journal of Systems and Software",
volume = "51",
number = "3",
pages = "245 - 273",
year = "2000",
issn = "0164-1212",
doi = "https://doi.org/10.1016/S0164-1212(99)00102-8",
url = "http://www.sciencedirect.com/science/article/pii/S0164121299001028",
author = "Lionel C. Briand and J√ºrgen W√ºst and John W. Daly and D. Victor Porter",
keywords = "Coupling, Cohesion, Inheritance, Object-oriented, Metrics, Measurement, Empirical validation",
abstract = "One goal of this paper is to empirically explore the relationships between existing object-oriented (OO) coupling, cohesion, and inheritance measures and the probability of fault detection in system classes during testing. In other words, we wish to better understand the relationship between existing design measurement in OO systems and the quality of the software developed. The second goal is to propose an investigation and analysis strategy to make these kind of studies more repeatable and comparable, a problem which is pervasive in the literature on quality measurement. Results show that many of the measures capture similar dimensions in the data set, thus reflecting the fact that many of them are based on similar principles and hypotheses. However, it is shown that by using a subset of measures, accurate models can be built to predict which classes most of the faults are likely to lie in. When predicting fault-prone classes, the best model shows a percentage of correct classifications higher than 80% and finds more than 90% of faulty classes. Besides the size of classes, the frequency of method invocations and the depth of inheritance hierarchies seem to be the main driving factors of fault-proneness."
}
@inproceedings{Nagappan:2006:MMP:1134285.1134349,
 author = {Nagappan, Nachiappan and Ball, Thomas and Zeller, Andreas},
 title = {Mining Metrics to Predict Component Failures},
 booktitle = {Proceedings of the 28th International Conference on Software Engineering},
 series = {ICSE '06},
 year = {2006},
 isbn = {1-59593-375-1},
 location = {Shanghai, China},
 pages = {452--461},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1134285.1134349},
 doi = {10.1145/1134285.1134349},
 acmid = {1134349},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {bug database, complexity metrics, empirical study, principal component analysis, regression model},
} 
@ARTICLE{1191795, 
author={R. {Subramanyam} and M. S. {Krishnan}}, 
journal={IEEE Transactions on Software Engineering}, 
title={Empirical analysis of CK metrics for object-oriented design complexity: implications for software defects}, 
year={2003}, 
volume={29}, 
number={4}, 
pages={297-310}, 
keywords={object-oriented programming;software metrics;program debugging;CK metric analysis;object-oriented design complexity;software defects;software development;software quality;OO design complexity metrics;software defect determination;C++;Java;Software design;Software quality;Application software;Programming;Productivity;Computer industry;Industrial control;Computer languages;Size control;Java}, 
doi={10.1109/TSE.2003.1191795}, 
ISSN={0098-5589}, 
month={April},}


@ARTICLE{1435354, 
author={T. J. {Ostrand} and E. J. {Weyuker} and R. M. {Bell}}, 
journal={IEEE Transactions on Software Engineering}, 
title={Predicting the location and number of faults in large software systems}, 
year={2005}, 
volume={31}, 
number={4}, 
pages={340-355}, 
keywords={program testing;software fault tolerance;binomial distribution;regression analysis;large software systems;binomial regression model;software fault prediction;software testing;Software systems;Predictive models;Fault diagnosis;System testing;History;Fault detection;Software testing;Personnel;Resource management;Sorting;Index Terms- Software faults;fault-prone;prediction;regression model;empirical study;software testing.}, 
doi={10.1109/TSE.2005.49}, 
ISSN={0098-5589}, 
month={April},}

@inproceedings{Zimmermann:2009:CDP:1595696.1595713,
 author = {Zimmermann, Thomas and Nagappan, Nachiappan and Gall, Harald and Giger, Emanuel and Murphy, Brendan},
 title = {Cross-project Defect Prediction: A Large Scale Experiment on Data vs. Domain vs. Process},
 booktitle = {Proceedings of the the 7th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering},
 series = {ESEC/FSE '09},
 year = {2009},
 isbn = {978-1-60558-001-2},
 location = {Amsterdam, The Netherlands},
 pages = {91--100},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1595696.1595713},
 doi = {10.1145/1595696.1595713},
 acmid = {1595713},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {churn, cross-project, decision trees, defect prediction, logistic regression, prediction quality},
} 
@ARTICLE{935855, 
author={K. {El Emam} and S. {Benlarbi} and N. {Goel} and S. N. {Rai}}, 
journal={IEEE Transactions on Software Engineering}, 
title={The confounding effect of class size on the validity of object-oriented metrics}, 
year={2001}, 
volume={27}, 
number={7}, 
pages={630-650}, 
keywords={software metrics;object-oriented programming;C++ language;software fault tolerance;software quality;class size;object-oriented metrics;software metrics validation;C++;telecommunications framework;fault-proneness;software quality;Size control;Software quality;Testing;Telecommunication control;Helium;Software engineering;Maintenance;Guidelines;Object oriented modeling;Predictive models}, 
doi={10.1109/32.935855}, 
ISSN={0098-5589}, 
month={July},}

@article{ELEMAM200163,
title = "The prediction of faulty classes using object-oriented design metrics",
journal = "Journal of Systems and Software",
volume = "56",
number = "1",
pages = "63 - 75",
year = "2001",
issn = "0164-1212",
doi = "https://doi.org/10.1016/S0164-1212(00)00086-8",
url = "http://www.sciencedirect.com/science/article/pii/S0164121200000868",
author = "Khaled El Emam and Walcelio Melo and Javam C. Machado",
keywords = "Object-oriented metrics, Software metrics, Software quality, Java metrics, Java quality",
abstract = "Contemporary evidence suggests that most field faults in software applications are found in a small percentage of the software's components. This means that if these faulty software components can be detected early in the development project's life cycle, mitigating actions can be taken, such as a redesign. For object-oriented applications, prediction models using design metrics can be used to identify faulty classes early on. In this paper we report on a study that used object-oriented design metrics to construct such prediction models. The study used data collected from one version of a commercial Java application for constructing a prediction model. The model was then validated on a subsequent release of the same application. Our results indicate that the prediction model has a high accuracy. Furthermore, we found that an export coupling (EC) metric had the strongest association with fault-proneness, indicating a structural feature that may be symptomatic of a class with a high probability of latent faults."
}

@article{Cartwright,
author = {Cartwright, Michelle and Shepperd, Martin},
year = {2000},
month = {09},
pages = {786 - 796},
title = {An Empirical Investigation of an Object-Oriented Software System.},
volume = {26},
journal = {Software Engineering, IEEE Transactions on},
doi = {10.1109/32.879814}
}
@article{ELISH2008649,
title = "Predicting defect-prone software modules using support vector machines",
journal = "Journal of Systems and Software",
volume = "81",
number = "5",
pages = "649 - 660",
year = "2008",
note = "Software Process and Product Measurement",
issn = "0164-1212",
doi = "https://doi.org/10.1016/j.jss.2007.07.040",
url = "http://www.sciencedirect.com/science/article/pii/S016412120700235X",
author = "Karim O. Elish and Mahmoud O. Elish",
keywords = "Software metrics, Defect-prone modules, Support vector machines, Predictive models",
abstract = "Effective prediction of defect-prone software modules can enable software developers to focus quality assurance activities and allocate effort and resources more efficiently. Support vector machines (SVM) have been successfully applied for solving both classification and regression problems in many applications. This paper evaluates the capability of SVM in predicting defect-prone software modules and compares its prediction performance against eight statistical and machine learning models in the context of four NASA datasets. The results indicate that the prediction performance of SVM is generally better than, or at least, is competitive against the compared models."
}

@INPROCEEDINGS{841025, 
author={L. C. {Briand} and J. {Wust} and S. V. {Ikonomovski} and H. {Lounis}}, 
booktitle={Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002)}, 
title={Investigating quality factors in object-oriented designs: an industrial case study}, 
year={1999}, 
volume={}, 
number={}, 
pages={345-354}, 
keywords={object-oriented programming;software quality;quality factors;object-oriented designs;industrial case study;OO system classes;OO systems;Computer aided software engineering;Computer industry;Industrial relations;Permission;Software engineering;Software measurement;Software quality;Frequency;Object oriented modeling;Performance evaluation}, 
doi={10.1145/302405.302654}, 
ISSN={0270-5257}, 
month={May},}

@INPROCEEDINGS{809745, 
author={ and and }, 
booktitle={Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403)}, 
title={An empirical study on object-oriented metrics}, 
year={1999}, 
volume={}, 
number={}, 
pages={242-249}, 
keywords={object-oriented programming;software metrics;program testing;real-time systems;object-oriented design metrics;object oriented faults;program testing;industrial real-time systems;object management faults;object oriented testing;Testing;Electrical capacitance tomography;Fault detection;Hip;Independent component analysis;Encapsulation;Microwave integrated circuits;Performance evaluation;Costs;Software metrics}, 
doi={10.1109/METRIC.1999.809745}, 
ISSN={}, 
month={Nov},}

@ARTICLE{5560680, 
author={Y. {Shin} and A. {Meneely} and L. {Williams} and J. A. {Osborne}}, 
journal={IEEE Transactions on Software Engineering}, 
title={Evaluating Complexity, Code Churn, and Developer Activity Metrics as Indicators of Software Vulnerabilities}, 
year={2011}, 
volume={37}, 
number={6}, 
pages={772-787}, 
keywords={Linux;online front-ends;program testing;public domain software;software fault tolerance;software metrics;code churn;software vulnerabilities;developer activity metrics;security inspection;software metrics;source code;vulnerable code locations;open-source projects;Mozilla Firefox Web browser;Red Hat enterprise Linux kernel;Fault diagnosis;Software security;Complexity theory;Predictive models;Charge coupled devices;Fault prediction;software metrics;software security;vulnerability prediction.}, 
doi={10.1109/TSE.2010.81}, 
ISSN={0098-5589}, 
month={Nov},}

@Article{Menzies2010,
author="Menzies, Tim
and Milton, Zach
and Turhan, Burak
and Cukic, Bojan
and Jiang, Yue
and Bener, Ay{\c{s}}e",
title="Defect prediction from static code features: current results, limitations, new approaches",
journal="Automated Software Engineering",
year="2010",
month="Dec",
day="01",
volume="17",
number="4",
pages="375--407",
abstract="Building quality software is expensive and software quality assurance (QA) budgets are limited. Data miners can learn defect predictors from static code features which can be used to control QA resources; e.g. to focus on the parts of the code predicted to be more defective.",
issn="1573-7535",
doi="10.1007/s10515-010-0069-5",
url="https://doi.org/10.1007/s10515-010-0069-5"
}

@ARTICLE{5611551, 
author={Q. {Song} and Z. {Jia} and M. {Shepperd} and S. {Ying} and J. {Liu}}, 
journal={IEEE Transactions on Software Engineering}, 
title={A General Software Defect-Proneness Prediction Framework}, 
year={2011}, 
volume={37}, 
number={3}, 
pages={356-370}, 
keywords={learning (artificial intelligence);software fault tolerance;software performance evaluation;software defect proneness prediction framework;scheme evaluation;competing learning schemes;defect predictor;Software;Training data;Predictive models;Buildings;Data models;Prediction algorithms;Training;Software defect prediction;software defect-proneness prediction;machine learning;scheme evaluation.}, 
doi={10.1109/TSE.2010.90}, 
ISSN={0098-5589}, 
month={May},}

@inproceedings{Bird:2011:DTM:2025113.2025119,
 author = {Bird, Christian and Nagappan, Nachiappan and Murphy, Brendan and Gall, Harald and Devanbu, Premkumar},
 title = {Don'T Touch My Code!: Examining the Effects of Ownership on Software Quality},
 booktitle = {Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering},
 series = {ESEC/FSE '11},
 year = {2011},
 isbn = {978-1-4503-0443-6},
 location = {Szeged, Hungary},
 pages = {4--14},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/2025113.2025119},
 doi = {10.1145/2025113.2025119},
 acmid = {2025119},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {emprical software engineering, expertise, ownership, quality},
} 

@inproceedings{Jureczko:2010:TIS:1868328.1868342,
 author = {Jureczko, Marian and Madeyski, Lech},
 title = {Towards Identifying Software Project Clusters with Regard to Defect Prediction},
 booktitle = {Proceedings of the 6th International Conference on Predictive Models in Software Engineering},
 series = {PROMISE '10},
 year = {2010},
 isbn = {978-1-4503-0404-7},
 location = {Timi\≈üoara, Romania},
 pages = {9:1--9:10},
 articleno = {9},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1868328.1868342},
 doi = {10.1145/1868328.1868342},
 acmid = {1868342},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {clustering, defect prediction, design metrics, size metrics},
} 

@article{FENTON200732,
title = "Predicting software defects in varying development lifecycles using Bayesian nets",
journal = "Information and Software Technology",
volume = "49",
number = "1",
pages = "32 - 43",
year = "2007",
note = "Most Cited Journal Articles in Software Engineering - 2000",
issn = "0950-5849",
doi = "https://doi.org/10.1016/j.infsof.2006.09.001",
url = "http://www.sciencedirect.com/science/article/pii/S0950584906001194",
author = "Norman Fenton and Martin Neil and William Marsh and Peter Hearty and David Marquez and Paul Krause and Rajat Mishra",
keywords = "Causal models, Dynamic Bayesian networks, Software defects, Decision support",
abstract = "An important decision in software projects is when to stop testing. Decision support tools for this have been built using causal models represented by Bayesian Networks (BNs), incorporating empirical data and expert judgement. Previously, this required a custom BN for each development lifecycle. We describe a more general approach that allows causal models to be applied to any lifecycle. The approach evolved through collaborative projects and captures significant commercial input. For projects within the range of the models, defect predictions are very accurate. This approach enables decision-makers to reason in a way that is not possible with regression-based models."
}

@inproceedings{Wolf:2009:PBF:1555001.1555017,
 author = {Wolf, Timo and Schroter, Adrian and Damian, Daniela and Nguyen, Thanh},
 title = {Predicting Build Failures Using Social Network Analysis on Developer Communication},
 booktitle = {Proceedings of the 31st International Conference on Software Engineering},
 series = {ICSE '09},
 year = {2009},
 isbn = {978-1-4244-3453-4},
 pages = {1--11},
 numpages = {11},
 url = {http://dx.doi.org/10.1109/ICSE.2009.5070503},
 doi = {10.1109/ICSE.2009.5070503},
 acmid = {1555017},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
} 

@INPROCEEDINGS{5362091, 
author={C. {Bird} and N. {Nagappan} and H. {Gall} and B. {Murphy} and P. {Devanbu}}, 
booktitle={2009 20th International Symposium on Software Reliability Engineering}, 
title={Putting It All Together: Using Socio-technical Networks to Predict Failures}, 
year={2009}, 
volume={}, 
number={}, 
pages={109-119}, 
keywords={human factors;social sciences;software development management;software fault tolerance;software quality;socio-technical network;social factor;development organization;software quality;task assignment;dependency structure;individual software components fault proneness;software component network property;Eclipse development environment;failure prone components prediction;Predictive models;History;Software quality;Costs;Software systems;Software reliability;Reliability engineering;Social factors;Software performance;NIST;social networks;empirical studies;bug prediction}, 
doi={10.1109/ISSRE.2009.17}, 
ISSN={1071-9458}, 
month={Nov}}

@INPROCEEDINGS{671604, 
author={A. B. {Binkley} and S. R. {Schach}}, 
booktitle={Proceedings of the 20th International Conference on Software Engineering}, 
title={Validation of the coupling dependency metric as a predictor of run-time failures and maintenance measures}, 
year={1998}, 
volume={}, 
number={}, 
pages={452-455}, 
keywords={software maintenance;software metrics;formal verification;software quality;coupling dependency metric;run-time failures;maintenance measures;design quality metric;run-time failure data;COBOL registration system;maintenance data;C text-processing utility;C++ patient collaborative care system;Java electronic file transfer facility;levels of interaction;software product;metrics validation;Runtime;Position measurement;Collaboration;Computer science;Java;Product design;Testing;Size measurement;Network-on-a-chip}, 
doi={10.1109/ICSE.1998.671604}, 
ISSN={0270-5257}, 
month={April}}

@Article{Okutan2014,
author="Okutan, Ahmet
and Y{\i}ld{\i}z, Olcay Taner",
title="Software defect prediction using Bayesian networks",
journal="Empirical Software Engineering",
year="2014",
month="Feb",
day="01",
volume="19",
number="1",
pages="154--181",
abstract="There are lots of different software metrics discovered and used for defect prediction in the literature. Instead of dealing with so many metrics, it would be practical and easy if we could determine the set of metrics that are most important and focus on them more to predict defectiveness. We use Bayesian networks to determine the probabilistic influential relationships among software metrics and defect proneness. In addition to the metrics used in Promise data repository, we define two more metrics, i.e. NOD for the number of developers and LOCQ for the source code quality. We extract these metrics by inspecting the source code repositories of the selected Promise data repository data sets. At the end of our modeling, we learn the marginal defect proneness probability of the whole software system, the set of most effective metrics, and the influential relationships among metrics and defectiveness. Our experiments on nine open source Promise data repository data sets show that response for class (RFC), lines of code (LOC), and lack of coding quality (LOCQ) are the most effective metrics whereas coupling between objects (CBO), weighted method per class (WMC), and lack of cohesion of methods (LCOM) are less effective metrics on defect proneness. Furthermore, number of children (NOC) and depth of inheritance tree (DIT) have very limited effect and are untrustworthy. On the other hand, based on the experiments on Poi, Tomcat, and Xalan data sets, we observe that there is a positive correlation between the number of developers (NOD) and the level of defectiveness. However, further investigation involving a greater number of projects is needed to confirm our findings.",
issn="1573-7616",
doi="10.1007/s10664-012-9218-8",
url="https://doi.org/10.1007/s10664-012-9218-8"
}

@article{HE2015170,
title = "An empirical study on software defect prediction with a simplified metric set",
journal = "Information and Software Technology",
volume = "59",
pages = "170 - 190",
year = "2015",
issn = "0950-5849",
doi = "https://doi.org/10.1016/j.infsof.2014.11.006",
url = "http://www.sciencedirect.com/science/article/pii/S0950584914002523",
author = "Peng He and Bing Li and Xiao Liu and Jun Chen and Yutao Ma",
keywords = "Defect prediction, Software metrics, Metric set simplification, Software quality",
abstract = "Context
Software defect prediction plays a crucial role in estimating the most defect-prone components of software, and a large number of studies have pursued improving prediction accuracy within a project or across projects. However, the rules for making an appropriate decision between within- and cross-project defect prediction when available historical data are insufficient remain unclear.
Objective
The objective of this work is to validate the feasibility of the predictor built with a simplified metric set for software defect prediction in different scenarios, and to investigate practical guidelines for the choice of training data, classifier and metric subset of a given project.
Method
First, based on six typical classifiers, three types of predictors using the size of software metric set were constructed in three scenarios. Then, we validated the acceptable performance of the predictor based on Top-k metrics in terms of statistical methods. Finally, we attempted to minimize the Top-k metric subset by removing redundant metrics, and we tested the stability of such a minimum metric subset with one-way ANOVA tests.
Results
The study has been conducted on 34 releases of 10 open-source projects available at the PROMISE repository. The findings indicate that the predictors built with either Top-k metrics or the minimum metric subset can provide an acceptable result compared with benchmark predictors. The guideline for choosing a suitable simplified metric set in different scenarios is presented in Table 12.
Conclusion
The experimental results indicate that (1) the choice of training data for defect prediction should depend on the specific requirement of accuracy; (2) the predictor built with a simplified metric set works well and is very useful in case limited resources are supplied; (3) simple classifiers (e.g., Na√Øve Bayes) also tend to perform well when using a simplified metric set for defect prediction; and (4) in several cases, the minimum metric subset can be identified to facilitate the procedure of general defect prediction with acceptable loss of prediction precision in practice."
}


@inproceedings{Ratzinger:2008:RRS:1370750.1370759,
 author = {Ratzinger, Jacek and Sigmund, Thomas and Gall, Harald C.},
 title = {On the Relation of Refactorings and Software Defect Prediction},
 booktitle = {Proceedings of the 2008 International Working Conference on Mining Software Repositories},
 series = {MSR '08},
 year = {2008},
 isbn = {978-1-60558-024-1},
 location = {Leipzig, Germany},
 pages = {35--38},
 numpages = {4},
 url = {http://doi.acm.org/10.1145/1370750.1370759},
 doi = {10.1145/1370750.1370759},
 acmid = {1370759},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {mining, software analysis, software evolution},
} 

@Article{McIntosh2016,
author="McIntosh, Shane
and Kamei, Yasutaka
and Adams, Bram
and Hassan, Ahmed E.",
title="An empirical study of the impact of modern code review practices on software quality",
journal="Empirical Software Engineering",
year="2016",
month="Oct",
day="01",
volume="21",
number="5",
pages="2146--2189",
abstract="Software code review, i.e., the practice of having other team members critique changes to a software system, is a well-established best practice in both open source and proprietary software domains. Prior work has shown that formal code inspections tend to improve the quality of delivered software. However, the formal code inspection process mandates strict review criteria (e.g., in-person meetings and reviewer checklists) to ensure a base level of review quality, while the modern, lightweight code reviewing process does not. Although recent work explores the modern code review process, little is known about the relationship between modern code review practices and long-term software quality. Hence, in this paper, we study the relationship between post-release defects (a popular proxy for long-term software quality) and: (1) code review coverage, i.e., the proportion of changes that have been code reviewed, (2) code review participation, i.e., the degree of reviewer involvement in the code review process, and (3) code reviewer expertise, i.e., the level of domain-specific expertise of the code reviewers. Through a case study of the Qt, VTK, and ITK projects, we find that code review coverage, participation, and expertise share a significant link with software quality. Hence, our results empirically confirm the intuition that poorly-reviewed code has a negative impact on software quality in large systems using modern reviewing tools.",
issn="1573-7616",
doi="10.1007/s10664-015-9381-9",
url="https://doi.org/10.1007/s10664-015-9381-9"
}

@Article{Madeyski2015,
author="Madeyski, Lech
and Jureczko, Marian",
title="Which process metrics can significantly improve defect prediction models? An empirical study",
journal="Software Quality Journal",
year="2015",
month="Sep",
day="01",
volume="23",
number="3",
pages="393--422",
abstract="The knowledge about the software metrics which serve as defect indicators is vital for the efficient allocation of resources for quality assurance. It is the process metrics, although sometimes difficult to collect, which have recently become popular with regard to defect prediction. However, in order to identify rightly the process metrics which are actually worth collecting, we need the evidence validating their ability to improve the product metric-based defect prediction models. This paper presents an empirical evaluation in which several process metrics were investigated in order to identify the ones which significantly improve the defect prediction models based on product metrics. Data from a wide range of software projects (both, industrial and open source) were collected. The predictions of the models that use only product metrics (simple models) were compared with the predictions of the models which used product metrics, as well as one of the process metrics under scrutiny (advanced models). To decide whether the improvements were significant or not, statistical tests were performed and effect sizes were calculated. The advanced defect prediction models trained on a data set containing product metrics and additionally Number of Distinct Committers (NDC) were significantly better than the simple models without NDC, while the effect size was medium and the probability of superiority (PS) of the advanced models over simple ones was high ({\$}{\$}p=.016{\$}{\$}p=.016, {\$}{\$}r=-.29{\$}{\$}r=-.29, {\$}{\$}{\backslash}hbox {\{}PS{\}}=.76{\$}{\$}PS=.76), which is a substantial finding useful in defect prediction. A similar result with slightly smaller PS was achieved by the advanced models trained on a data set containing product metrics and additionally all of the investigated process metrics ({\$}{\$}p=.038{\$}{\$}p=.038, {\$}{\$}r=-.29{\$}{\$}r=-.29, {\$}{\$}{\backslash}hbox {\{}PS{\}}=.68{\$}{\$}PS=.68). The advanced models trained on a data set containing product metrics and additionally Number of Modified Lines (NML) were significantly better than the simple models without NML, but the effect size was small ({\$}{\$}p=.038{\$}{\$}p=.038, {\$}{\$}r=.06{\$}{\$}r=.06). Hence, it is reasonable to recommend the NDC process metric in building the defect prediction models.",
issn="1573-1367",
doi="10.1007/s11219-014-9241-7",
url="https://doi.org/10.1007/s11219-014-9241-7"
}

@inproceedings{Ostrand:2010:PFP:1868328.1868357,
 author = {Ostrand, Thomas J. and Weyuker, Elaine J. and Bell, Robert M.},
 title = {Programmer-based Fault Prediction},
 booktitle = {Proceedings of the 6th International Conference on Predictive Models in Software Engineering},
 series = {PROMISE '10},
 year = {2010},
 isbn = {978-1-4503-0404-7},
 location = {Timi\≈üoara, Romania},
 pages = {19:1--19:10},
 articleno = {19},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1868328.1868357},
 doi = {10.1145/1868328.1868357},
 acmid = {1868357},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {bug ratio, empirical study, fault-prone, prediction, regression model, software faults},
} 



@inproceedings{Jermakovics:2011:MVD:1984642.1984647,
 author = {Jermakovics, Andrejs and Sillitti, Alberto and Succi, Giancarlo},
 title = {Mining and Visualizing Developer Networks from Version Control Systems},
 booktitle = {Proceedings of the 4th International Workshop on Cooperative and Human Aspects of Software Engineering},
 series = {CHASE '11},
 year = {2011},
 isbn = {978-1-4503-0576-1},
 location = {Waikiki, Honolulu, HI, USA},
 pages = {24--31},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/1984642.1984647},
 doi = {10.1145/1984642.1984647},
 acmid = {1984647},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {social networks, software processes, visualization},
} 

@article{Concas:2010:ESS:1945538.1972593,
 author = {Concas, Giulio and Marchesi, Michele and Murgia, Alessandro and Tonelli, Roberto},
 title = {An Empirical Study of Social Networks Metrics in Object-oriented Software},
 journal = {Adv. Soft. Eng.},
 issue_date = {January 2010},
 volume = {2010},
 month = jan,
 year = {2010},
 issn = {1687-8655},
 pages = {4:1--4:21},
 articleno = {4},
 numpages = {21},
 url = {http://dx.doi.org/10.1155/2010/729826},
 doi = {10.1155/2010/729826},
 acmid = {1972593},
 publisher = {Hindawi Publishing Corp.},
 address = {New York, NY, United States},
} 
@inproceedings{Bicer:2011:DPU:1987875.1987888,
 author = {Bi\c{c}er, Serdar and Bener, Ay\c{s}e Ba\c{s}ar and \c{C}a\u{g}layan, Bora},
 title = {Defect Prediction Using Social Network Analysis on Issue Repositories},
 booktitle = {Proceedings of the 2011 International Conference on Software and Systems Process},
 series = {ICSSP '11},
 year = {2011},
 isbn = {978-1-4503-0730-7},
 location = {Waikiki, Honolulu, HI, USA},
 pages = {63--71},
 numpages = {9},
 url = {http://doi.acm.org/10.1145/1987875.1987888},
 doi = {10.1145/1987875.1987888},
 acmid = {1987888},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {defect prediction, developer communication, network metrics, social networks},
} 

@article{Udaya,
author = {Udaya B. Challagulla, Venkata and B. Bastani, Farokh and Yen, I-Ling and A. Paul, Raymond},
year = {2008},
month = {04},
pages = {389-400},
title = {Empirical Assessment of Machine Learning Based Software Defect Prediction Techniques.},
volume = {17},
journal = {International Journal on Artificial Intelligence Tools},
doi = {10.1142/S0218213008003947}
}

@article{Prasad,
author = {Prasad, Manjula.C.M. and Florence, Lilly and Arya, Arti},
year = {2015},
month = {06},
pages = {179-190},
title = {A Study on Software Metrics based Software Defect Prediction using Data Mining and Machine Learning Techniques},
volume = {7},
journal = {International Journal of Database Theory and Application},
doi = {10.14257/ijdta.2015.8.3.15}
}

@Article{Kumar2017,
author="Kumar, Chandan
and Yadav, Dilip Kumar",
title="Software defects estimation using metrics of early phases of software development life cycle",
journal="International Journal of System Assurance Engineering and Management",
year="2017",
month="Dec",
day="01",
volume="8",
number="4",
pages="2109--2117",
abstract="An estimation of software defects can be obtained in the later phase of software testing. However, with the aim of cost-effectiveness and timely management of resources, the software defects estimation in the early phases of software development life cycle (SDLC) is one of the major research areas. In this paper, a software defect estimation model is proposed using Bayesian belief network (BBN) and reliability relevant metrics of early phases of SDLC (e.g., requirement analysis, design and coding phases). The causal relationship of software metrics is modeled using BBN. The qualitative value of software metrics and expert assessment of software defects is used for developing the proposed model. The defects estimation accuracy of the proposed model is examined using qualitative data set of ten real software projects. The defects estimation results are compared with the existing model and found more accurate.",
issn="0976-4348",
doi="10.1007/s13198-014-0326-2",
url="https://doi.org/10.1007/s13198-014-0326-2"
}

@misc{jiarpakdee2018impact,
    title={The Impact of Correlated Metrics on Defect Models},
    author={Jirayus Jiarpakdee and Chakkrit Tantithamthavorn and Ahmed E. Hassan},
    year={2018},
    eprint={1801.10271},
    archivePrefix={arXiv},
    primaryClass={cs.SE}
}

@Article{Gupta2017,
author="Gupta, Dharmendra Lal
and Saxena, Kavita",
title="Software bug prediction using object-oriented metrics",
journal="S{\={a}}dhan{\={a}}",
year="2017",
month="May",
day="01",
volume="42",
number="5",
pages="655--669",
abstract="Software quality is the fundamental requirement for a user, academia person, software developing organizations and researchers. In this paper a model for object-oriented Software Bug Prediction System (SBPS) has been developed. This model is capable of predicting the existence of bugs in a class if found, during software validation using metrics. The designed model forecasts the occurrences of bugs in a class when any new system is tested on it. For this experiment some open source similar types of defect datasets (projects) have been collected from Promise Software Engineering Repository. Some of these datasets have been selected for prediction of bugs, of which a few are not involved in model construction. First of all, we have formulated some hypotheses corresponding to each and every metric, and from metrics validation based on hypothesis basis finally 14 best suitable metrics have been selected for model creation. The Logistic Regression Classifier provides good accuracy among all classifiers. The proposed model is trained and tested on each of the validated dataset, including validated Combined Dataset separately too. The performance measure (accuracy) is computed in each case and finally it is found that the model provides overall averaged accuracy of 76.27{\%}.",
issn="0973-7677",
doi="10.1007/s12046-017-0629-5",
url="https://doi.org/10.1007/s12046-017-0629-5"
}
@Article{Jayanthi2018,
author="Jayanthi, R.
and Florence, Lilly",
title="Software defect prediction techniques using metrics based on neural network classifier",
journal="Cluster Computing",
year="2018",
month="Feb",
day="07",
abstract="Software industries strive for software quality improvement by consistent bug prediction, bug removal and prediction of fault-prone module. This area has attracted researchers due to its significant involvement in software industries. Various techniques have been presented for software defect prediction. Recent researches have recommended data-mining using machine learning as an important paradigm for software bug prediction. state-of-art software defect prediction task suffer from various issues such as classification accuracy. However, software defect datasets are imbalanced in nature and known fault prone due to its huge dimension. To address this issue, here we present a combined approach for software defect prediction and prediction of software bugs. Proposed approach delivers a concept of feature reduction and artificial intelligence where feature reduction is carried out by well-known principle component analysis (PCA) scheme which is further improved by incorporating maximum-likelihood estimation for error reduction in PCA data reconstruction. Finally, neural network based classification technique is applied which shows prediction results. A framework is formulated and implemented on NASA software dataset where four datasets i.e., KC1, PC3, PC4 and JM1 are considered for performance analysis using MATLAB simulation tool. An extensive experimental study is performed where confusion, precision, recall, classification accuracy etc. parameters are computed and compared with existing software defect prediction techniques. Experimental study shows that proposed approach can provide better performance for software defect prediction.",
issn="1573-7543",
doi="10.1007/s10586-018-1730-1",
url="https://doi.org/10.1007/s10586-018-1730-1"
}

@InProceedings{10.1007/978-981-13-1927-3_48,
author="Ravi Kumar, T.
and Srinivasa Rao, T.
and Bathini, Sandhya",
editor="Satapathy, Suresh Chandra
and Bhateja, Vikrant
and Das, Swagatam",
title="A Predictive Approach to Estimate Software Defects Density Using Weighted Artificial Neural Networks for the Given Software Metrics",
booktitle="Smart Intelligent Computing and Applications ",
year="2019",
publisher="Springer Singapore",
address="Singapore",
pages="449--457",
abstract="Context Applications of software have penetrated into every part of human life and have become significant in versatile areas. A case of negligence could cost a great loss of economy or even to life (Pentium FDIV bug ``Statistical Analysis of Floating Point Flaw: Intel White Paper'' (PDF) (2004) [1]; The Helminthiasis of the Internet [2]), and hence the reliability of the functions of an application is of extreme importance. A software error could be a deviation from the process flow, improper requirement definitions, or ambiguity in defining the constraints (IEEE Standard Glossary of Software Engineering Terminology (1990) [3]). To avoid the lateral effects, the applications should be evaluated beforehand for all defects in all phases of the software cycle. Objective This paper emphasizes on the prediction of software defect density using weighted neural networks and comparison with the fuzzy logic-based approach. Method Each design phase is divided into the neural network node. Software metrics are chosen for each stage and fed into the nodes with a weight associated to it. Neural network system are associated with input layers, SW-DDC layer (stage-wise defect density calculation layer) and C-DDC (consolidated defect density calculation layer). Results The accuracy of the predicted defects is very close the actual defects. Validation results show this method is very accurate than the current methods like fuzzy implementation. Conclusion Weighted artificial networks is used to predict the software defect density and is been verified on different real-time data sets ranging from very low project sizes to the very high project size.",
isbn="978-981-13-1927-3"
}

@misc{prasad2018statistical,
    title={Statistical Analysis of Metrics for Software Quality Improvement},
    author={Karuna Prasad and MG Divya and N Mangala},
    year={2018},
    eprint={1802.05865},
    archivePrefix={arXiv},
    primaryClass={cs.SE}
}

@INPROCEEDINGS{8595100, 
author={J. {Ludwig} and S. {Xu} and F. {Webber}}, 
booktitle={2018 IEEE/ACM International Conference on Technical Debt (TechDebt)}, 
title={Static Software Metrics for Reliability and Maintainability}, 
year={2018}, 
volume={}, 
number={}, 
pages={53-54}, 
keywords={case-based reasoning;software metrics;software quality;commonly identified sources;technical debt;open-source plug-in;static software metrics;static software code metrics;software product quality characteristics;code analysis tool;Measurement;Software;Software reliability;Quality assessment;Product design;Software engineering;Software product quality;technical debt;reliability;maintainability;architecture;metrics;static code analysis}, 
doi={}, 
ISSN={}, 
month={May},}

@InProceedings{10.1007/978-3-319-92270-6_42,
author="Suzuki, Jessica
and Canedo, Edna Dias",
editor="Stephanidis, Constantine",
title="Interaction Design Process Oriented by Metrics",
booktitle="HCI International 2018 -- Posters' Extended Abstracts",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="290--297",
abstract="Software quality is more than code, it expands beyond the code, the noticeable aspects for the user must be considered. In order to capture these aspects one can look towards the area of Interaction Design, which is studied within the discipline of Human-Computer Interaction (HCI). To apply the concepts of this discipline, procedures must be respected, thus forming a process. When considering software quality, one must consider processes it is the use of metrics. In this context, this paper explores a process of design interaction oriented by metrics. Supported by a literature review and methodology, the process is defined supporting this underlying argument. A questionnaire targeted with knowing in the field will reveal results aimed at validating and improving the proposed process.",
isbn="978-3-319-92270-6"
}

@article{Xenos,
author = {Xenos, Michalis},
year = {2006},
month = {01},
pages = {1029-1036},
title = {Software Metrics and Measurements},
journal = {Encyclopedia of E-Commerce, E-Government and Mobile Commerce},
doi = {10.4018/9781591407997.ch165}
}

@ARTICLE{1020298, 
author={N. {Fenton} and P. {Krause} and M. {Neil}}, 
journal={IEEE Software}, 
title={Software measurement: uncertainty and causal modeling}, 
year={2002}, 
volume={19}, 
number={4}, 
pages={116-122}, 
keywords={risk management;software metrics;belief networks;uncertainty handling;software development management;software measurement;causal modelling;uncertainty;risk management;Bayesian networks;graphical modelling technique;Software measurement;Testing;Predictive models;Risk management;Programming;Project management;Lungs;Cancer;Laboratories;Bayesian methods}, 
doi={10.1109/MS.2002.1020298}, 
ISSN={0740-7459}, 
month={July},}



%presence of heros

@inproceedings{ricca2010heroes,
  title={Are heroes common in FLOSS projects?},
  author={Ricca, Filippo and Marchetto, Alessandro},
  booktitle={Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement},
  pages={55},
  year={2010},
  organization={ACM}
}

@inproceedings{robles2006contributor,
  title={Contributor turnover in libre software projects},
  author={Robles, Gregorio and Gonzalez-Barahona, Jesus M},
  booktitle={IFIP International Conference on Open Source Systems},
  pages={273--286},
  year={2006},
  organization={Springer}
}

@article{capiluppi2007adapting,
  title={Adapting the ‚ÄúStaged Model for Software Evolution‚Äù to FLOSS},
  author={Capiluppi, Andrea and Gonzalez Barahona, Jesus M and Herraiz, Israel},
  year={2007}
}


%heros are bad
@inproceedings{fitzgerald2003making,
  title={Making Free/Open-Source Software (F/OSS) Work Better},
  author={Fitzgerald, Brian and Parnas, David L},
  booktitle={Proceedings do Workshop da Confer{\^e}ncia XP2003, Genova},
  year={2003},
  organization={Citeseer}
}

%communication network - failure

@inproceedings{wolf2009predicting,
  title={Predicting build failures using social network analysis on developer communication},
  author={Wolf, Timo and Schroter, Adrian and Damian, Daniela and Nguyen, Thanh},
  booktitle={Proceedings of the 31st International Conference on Software Engineering},
  pages={1--11},
  year={2009},
  organization={IEEE Computer Society}
}

@inproceedings{de2004sometimes,
  title={Sometimes you need to see through walls: a field study of application programming interfaces},
  author={de Souza, Cleidson RB and Redmiles, David and Cheng, Li-Te and Millen, David and Patterson, John},
  booktitle={Proceedings of the 2004 ACM conference on Computer supported cooperative work},
  pages={63--71},
  year={2004},
  organization={ACM}
}

@inproceedings{grinter1999geography,
  title={The geography of coordination: Dealing with distance in R\&D work},
  author={Grinter, Rebecca E and Herbsleb, James D and Perry, Dewayne E},
  booktitle={Proceedings of the international ACM SIGGROUP conference on Supporting group work},
  pages={306--315},
  year={1999},
  organization={ACM}
}

@inproceedings{herbsleb1999splitting,
  title={Splitting the organization and integrating the code: Conway's law revisited},
  author={Herbsleb, James D and Grinter, Rebecca E},
  booktitle={Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No. 99CB37002)},
  pages={85--95},
  year={1999},
  organization={IEEE}
}

@article{cataldo2013coordination,
  title={Coordination breakdowns and their impact on development productivity and software failures},
  author={Cataldo, Marcelo and Herbsleb, James D},
  journal={IEEE Transactions on Software Engineering},
  volume={39},
  number={3},
  pages={343--360},
  year={2013},
  publisher={IEEE}
}

@inproceedings{cataldo2007coordination,
  title={On coordination mechanisms in global software development},
  author={Cataldo, Marcelo and Bass, Matthew and Herbsleb, James D and Bass, Len},
  booktitle={International Conference on Global Software Engineering (ICGSE 2007)},
  pages={71--80},
  year={2007},
  organization={IEEE}
}

%SZZ 
@inproceedings{williams2008szz,
  title={Szz revisited: verifying when changes induce fixes},
  author={Williams, Chadd and Spacco, Jaime},
  booktitle={Proceedings of the 2008 workshop on Defects in large software systems},
  pages={32--36},
  year={2008},
  organization={ACM}
}

@article{bach1995enough,
  title={Enough about process: what we need are heroes},
  author={Bach, James},
  journal={IEEE Software},
  volume={12},
  number={2},
  pages={96--98},
  year={1995},
  publisher={IEEE}
}

@book{cockburn2006agile,
  title={Agile software development: the cooperative game},
  author={Cockburn, Alistair},
  year={2006},
  publisher={Pearson Education}
}

@article{kemerer2009impact,
  title={The impact of design and code reviews on software quality: An empirical study based on psp data},
  author={Kemerer, Chris F and Paulk, Mark C},
  journal={IEEE transactions on software engineering},
  volume={35},
  number={4},
  pages={534--550},
  year={2009},
  publisher={IEEE}
}

@inproceedings{knab2006predicting,
  title={Predicting defect densities in source code files with decision tree learners},
  author={Knab, Patrick and Pinzger, Martin and Bernstein, Abraham},
  booktitle={Proceedings of the 2006 international workshop on Mining software repositories},
  pages={119--125},
  year={2006},
  organization={ACM}
}

@INPROCEEDINGS{1008000, 
author={L. {Augustin} and D. {Bressler} and G. {Smith}}, 
booktitle={Proceedings of the 24th International Conference on Software Engineering. ICSE 2002}, 
title={Accelerating software development through collaboration}, 
year={2002}, 
volume={}, 
number={}, 
pages={559-563}, 
keywords={software engineering;Internet;public domain software;VA Software;collaborative software development;SourceForge platform;Web site;Linux;open source software;Internet;software engineering methodologies;Acceleration;Programming;Collaborative software;Software quality;Internet;Linux;Software engineering;Testing;Companies;Pain}, 
doi={10.1145/581407.581409}, 
ISSN={}, 
month={May},}

@INPROCEEDINGS{4221622, 
author={J. {Whitehead}}, 
booktitle={Future of Software Engineering (FOSE '07)}, 
title={Collaboration in Software Engineering: A Roadmap}, 
year={2007}, 
volume={}, 
number={}, 
pages={214-225}, 
keywords={groupware;software development management;Unified Modeling Language;software engineering projects;large software system;model-oriented collaboration;collaboration research;artifact-neutral coordination;UML collaboration tools;massively multiplayer online game technology;collaborative systems;Collaborative software;Software engineering;Collaborative work;Collaborative tools;Computer science;Software systems;Online Communities/Technical Collaboration;Humans;Convergence;Writing}, 
doi={10.1109/FOSE.2007.4}, 
ISSN={}, 
month={May},
}

@inproceedings{jarczyk2014github,
  title={Github projects. quality analysis of open-source software},
  author={Jarczyk, Oskar and Gruszka, B{\l}a{\.z}ej and Jaroszewicz, Szymon and Bukowski, Leszek and Wierzbicki, Adam},
  booktitle={International Conference on Social Informatics},
  pages={80--94},
  year={2014},
  organization={Springer}
}
@inproceedings{bissyande2013got,
  title={Got issues? who cares about it? a large scale investigation of issue trackers from github},
  author={Bissyand{\'e}, Tegawend{\'e} F and Lo, David and Jiang, Lingxiao and R{\'e}veillere, Laurent and Klein, Jacques and Le Traon, Yves},
  booktitle={Software Reliability Engineering (ISSRE), 2013 IEEE 24th International Symposium on},
  pages={188--197},
  year={2013},
  organization={IEEE}
}

@article{athanasiou2014test,
  title={Test code quality and its relation to issue handling performance},
  author={Athanasiou, Dimitrios and Nugroho, Ariadi and Visser, Joost and Zaidman, Andy},
  journal={IEEE Transactions on Software Engineering},
  volume={40},
  number={11},
  pages={1100--1125},
  year={2014},
  publisher={IEEE}
}

@inproceedings{gupta2014process,
  title={Process mining multiple repositories for software defect resolution from control and organizational perspective},
  author={Gupta, Monika and Sureka, Ashish and Padmanabhuni, Srinivas},
  booktitle={Proceedings of the 11th Working Conference on Mining Software Repositories},
  pages={122--131},
  year={2014},
  organization={ACM}
}

@article{reyes2017analyzing,
  title={Analyzing GitHub as a Collaborative Software Development Platform: A Systematic Review},
  author={Reyes L{\'o}pez, Arturo},
  year={2017}
}

@article{moniruzzaman2013comparative,
  title={Comparative study on agile software development methodologies},
  author={Moniruzzaman, ABM and Hossain, Dr Syed Akhter},
  journal={arXiv preprint arXiv:1307.3356},
  year={2013}
}

@article{rastogi2017empirical,
  title={Empirical analyses of software contributor productivity},
  author={Rastogi, Ayushi and Nagappan, Nachiappan and Jalote, Pankaj},
  year={2017},
  school={IIIT-Delhi}
}

@article{vijay2017software,
 title={Software Quality Metrics in Quality Assurance to Study the Impact of External Factors related to Time},
 author={Vijay, T John and Chand, Dr M Gopi and Done, Dr Harika},
 journal={International Journal of Advanced Research in Computer Science and Software Engineering},
 volume={7},
 number={1},
 year={2017}
}

@inproceedings{dahab2018enhancing,
 title={Enhancing software development process quality based on metrics correlation and suggestion},
 author={Dahab, Sarah and Balocchi, Erika Fernanda Silva and Maag, Stephane and Cavalli, Ana Rosa and Mallouli, Wissam},
 booktitle={ICSOFT 2018: 13th International Conference on Software Technologies},
 pages={120--131},
 year={2018},
 organization={Scitepress}
}

@inproceedings{hindle2008large,
  title={What do large commits tell us?: a taxonomical study of large commits},
  author={Hindle, Abram and German, Daniel M and Holt, Ric},
  booktitle={Proceedings of the 2008 international working conference on Mining software repositories},
  pages={99--108},
  year={2008},
  organization={ACM}
}

@inproceedings{rosen2015commit,
  title={Commit guru: analytics and risk prediction of software commits},
  author={Rosen, Christoffer and Grawi, Ben and Shihab, Emad},
  booktitle={Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering},
  pages={966--969},
  year={2015},
  organization={ACM}
}

@inproceedings{vasilescu2015quality,
  title={Quality and productivity outcomes relating to continuous integration in GitHub},
  author={Vasilescu, Bogdan and Yu, Yue and Wang, Huaimin and Devanbu, Premkumar and Filkov, Vladimir},
  booktitle={Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering},
  pages={805--816},
  year={2015},
  organization={ACM}
}


@article{louridas2008power,
  title={Power laws in software},
  author={Louridas, Panagiotis and Spinellis, Diomidis and Vlachos, Vasileios},
  journal={ACM Transactions on Software Engineering and Methodology (TOSEM)},
  volume={18},
  number={1},
  pages={2},
  year={2008},
  publisher={ACM}
}

@article{concas2007power,
  title={Power-laws in a large object-oriented software system},
  author={Concas, Giulio and Marchesi, Michele and Pinna, Sandro and Serra, Nicola},
  journal={IEEE Transactions on Software Engineering},
  volume={33},
  number={10},
  pages={687--708},
  year={2007},
  publisher={IEEE}
}

@inproceedings{wheeldon2003power,
  title={Power law distributions in class relationships},
  author={Wheeldon, Richard and Counsell, Steve},
  booktitle={Proceedings Third IEEE International Workshop on Source Code Analysis and Manipulation},
  pages={45--54},
  year={2003},
  organization={IEEE}
}

@inproceedings{lin2015power,
  title={Why power laws? an explanation from fine-grained code changes},
  author={Lin, Zhongpeng and Whitehead, Jim},
  booktitle={2015 IEEE/ACM 12th Working Conference on Mining Software Repositories},
  pages={68--75},
  year={2015},
  organization={IEEE}
}

